108 Cards
Four Suites Red, Green, Yellow and Blue
Each suit has 1*0, 2 of each card number 1-9
Each suit also has two draw cards, two skip cards and two reverse cards
Finally there are 4 wild card and four wild draw cards



Games are all run form a centralised games class - This will allow the saving an restoring of games in any state at any time. The whole game object will simply need saving as a binary.

All Cards stored in a list, saved to and restored from a binary

All card details will be pulled from the main static list in UnoMain.
Inside the game objects, the deck is represented by a list of integers from 0 to 107, the integer represents the index of the card in the cardDeck static list in UnoMain.
This allows for the movement of integers as value types between the DeckList, DiscardList and PlayersCardsLists. 

The cardDeck list is constructed so you have Suit Red, SuitGreen, SuitBlue, SuitYellow, WildCards. In each suit area of the list is as follows
Number card 0,1,2,3,4,5,6,7,8,9,draw, reverse, skip

Because of this construction, if the any list of integers representing the cards is sorted, all suits will be clustered together and all numbers within each 
suit will be displayed in order followed by the specials, finally wilds. 

This should allow for easy updating of the GUI to make playing the game significantly easier. 



GUI
---
initial start up window just calls load deck in UnoMain, then closes and opens the Main Menu Window. Allows easier following of naming convention without worrying about stuff being over written.

MainMenu
--------
3 buttons, new, load, save

Load - will display a new page which shows availible game files as a list, passes the game file name over to LoadGame in UnoMain.
Save - will display a new page asking for a file name, then pass the name over to the SaveGame method in UnoMain.
NewGame - Will display a new page asking for player names, with 10 slots available, names will be added to a list, which will be passed to the NewGame method in UnoMain.